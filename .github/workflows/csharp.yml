name: csharpWorkflow

on:
  push:
    branches: main 
    paths:
      - 'csharp/**'
      - '.github/workflows/cs.yml'
env:
  NUGETTOKEN: ${{ secrets.NUGET_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SCRIPTS_BASE_URL: https://raw.githubusercontent.com/linksplatform/Scripts/master/MultiProjectRepository
  CSHARP_DIRECTORY_PATH: csharp

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.CSHARP_DIRECTORY_PATH }}
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - name: Test C#
        run: |
          dotnet test -c Release -f net6
  pushCSharpNuGetToGitHubPackageRegistry:
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.CSHARP_DIRECTORY_PATH }}
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - uses: nuget/setup-nuget@v1
      - name: Publish CSharp NuGet to GitHub Package Registry
        run: |
          dotnet build -c Release
          dotnet pack -c Release
          nuget source Add -Name "GitHub" -Source "https://nuget.pkg.github.com/linksplatform/index.json" -UserName linksplatform -Password ${{ secrets.GITHUB_TOKEN }}
          nuget push **/*.nupkg -Source "GitHub" -SkipDuplicate
  pusnToNuget:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.CSHARP_DIRECTORY_PATH }}
    needs: test
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: Read CSharp project information
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/read_csharp_package_info.sh"
        bash ./read_csharp_package_info.sh
    - name: Publish CSharp NuGet package
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/push-csharp-nuget.sh"
        bash ./push-csharp-nuget.sh
  publiseRelease:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.CSHARP_DIRECTORY_PATH }}
    needs: pusnToNuget
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - name: Publish release
        run: |
          export REPOSITORY_NAME=$(basename ${{ github.repository }})
          wget "$SCRIPTS_BASE_URL/publish-release.sh"
          bash ./publish-release.sh
  findChangedCsFiles:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.CSHARP_DIRECTORY_PATH }}
    needs: publiseRelease
    outputs:
      isCsFilesChanged: steps.check_if_csharp_files_changed.outputs.findChangesCsFiles
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: Check if cs files are changed
      uses: tj-actions/verify-changed-files@v5.5
      id: findChangesCsFiles
      with:
        files: |
           *.cs
  generatePdfWithCsharpCode:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.CSHARP_DIRECTORY_PATH }}
    needs: [findChangedCsFiles]
    if: needs.findChangedCsFiles.outputs.isCsFilesChanged == 'true'
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: Generate PDF with CSharp code
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/format-csharp-files.py"
        wget "$SCRIPTS_BASE_URL/format-csharp-document.sh"
        wget "$SCRIPTS_BASE_URL/generate-csharp-pdf.sh"
        bash ./generate-csharp-pdf.sh
  publishDocumentation:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.CSHARP_DIRECTORY_PATH }}
    needs: [findChangedCsFiles]
    if: needs.findChangedCsFiles.outputs.isCsFilesChanged == 'true'
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: Publish CSharp documentation to gh-pages branch
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/docfx.json"
        wget "$SCRIPTS_BASE_URL/filter.yml"
        wget "$SCRIPTS_BASE_URL/toc.yml"
        wget "$SCRIPTS_BASE_URL/publish-csharp-docs.sh"
        bash ./publish-csharp-docs.sh
