name: cppWorkflow

on:
  push:
    branches: main
    paths:
      - 'cpp/**'
      - '.github/workflows/cpp.yml'

env:
  NUGETTOKEN: ${{ secrets.NUGET_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SCRIPTS_BASE_URL: https://raw.githubusercontent.com/linksplatform/Scripts/main/MultiProjectRepository

defaults:
  run:
    working-directory: cpp

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - name: Set up GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: latest
          platform: x64
      - name: Install conan
        run: pip install conan
      - name: Setup conan
        run: |
          conan profile new linksplatform --detect
          conan profile update settings.compiler=clang linksplatform
          conan profile update settings.compiler.version=13 linksplatform
          conan profile update settings.compiler.libcxx=libstdc++11 linksplatform
          conan profile update env.CXX=g++ linksplatform
          conan profile show linksplatform
      - name: Instll conan packages
        run: |
          if [ -f "install-local-conan-dependencies.sh" ]; then
              echo "install-local-conan-dependencies.sh exists."
              ./install-conan-dependencies.sh
          fi
  testCpp:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - name: Test C++ and scan-build
        run: |
          cmake_flags="-DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=g++ -DLINKS_PLATFORM_TESTS=TRUE"
          cmake_build_dir="build"
          mkdir $cmake_build_dir && cd $cmake_build_dir
          conan install .. -pr=linksplatform --build=missing
          cmake .. "$cmake_flags"
          cmake --build .
          ls
  pushToNuget:
    runs-on: ubuntu-latest
    needs: testCpp
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: Read Cpp package information
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/read_cpp_package_info.sh"
        bash ./read_cpp_package_info.sh
    - name: Publish Cpp NuGet package
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/push-cpp-nuget.sh"
        bash ./push-cpp-nuget.sh
